plugins {
    id 'org.springframework.boot' version '3.0.0-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id "org.liquibase.gradle" version "2.0.4"
    id "com.github.node-gradle.node" version "3.1.0"
    id 'com.github.spotbugs' version '5.0.9'
    id 'checkstyle'
    id 'pmd'
    id 'java'
}

apply plugin: "org.liquibase.gradle"
apply plugin: 'com.github.node-gradle.node'
group = 'ru.assaulov'
version = '0.10.7'
sourceCompatibility = '17'
targetCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


def profile = System.getenv("PROFILE")
node {
    println "profile in node = $profile"
    version = '17.4.0'
    if (profile == 'prod') {
        def system = System.getenv('SYSTEM')
        println "system = $system"
        if (system == 'win') {
            distBaseUrl = 'https://nodejs.org/dist/'
        } else if (system == 'unix') {
            distBaseUrl = 'https://unofficial-builds.nodejs.org/download/release/'
        }
    }
    download = true
}

println "profile before task buildFront = $profile"
if (profile == 'prod') {
    println "start task buildFront"
    task buildFront(type: YarnTask) {
        args = ['built']
    }
    yarn_install.dependsOn(yarn_cache_clean)
    buildFront.dependsOn(yarn_install)
    processResources.dependsOn(buildFront)

    sourceSets {
        main {
            resources {
                exclude 'js'
            }
        }
    }
}


repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'javax.xml.bind:jaxb-api'
    implementation 'org.springframework.session:spring-session-jdbc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly  'com.h2database:h2:2.1.214'
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
}

liquibase {
    activities {
        main {
            changeLogFile System.getenv('CHANGE_LOG')
            url System.getenv('DB_URL')
            username System.getenv('POSTGRES_USER')
            password System.getenv('POSTGRES_PASSWORD')
            classpath "$rootDir"
        }
    }
}

test {
    useJUnitPlatform()
    dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest
}

checkstyle {
    toolVersion '10.3.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

pmd {
    consoleOutput = true
    toolVersion = "6.47.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

spotbugs {
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("config/spotbugs/exclude.xml")
}


checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

spotbugsMain {
    reports {
        html.enabled(true)
    }
}
spotbugsTest {
    reports {
        html.enabled(true)
    }
}


//tasks.withType(Test) {enabled = false}
